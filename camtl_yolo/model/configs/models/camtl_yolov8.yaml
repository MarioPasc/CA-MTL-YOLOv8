SCALE: s # model scale: n, s, m, l, x
PRETRAINED_MODELS_PATH: /media/mpascual/PortableSSD/Coronariografías/CAMTL_YOLO/pretrained_models/COCO
# We need the task to know which pretrained weights we have to load:
# TASK: DomainShift1 -> We expect COCO-seg weights as input: Two files in PRETRAINED_MODELS_PATH:
#   yolov8{SCALE}-seg.pt  (for backbone+neck+seg head)
#   yolov8{SCALE}.pt      (for detection head)
# TASK: CAMTL -> We expect Retinography-seg weights as input: One file in PRETRAINED_MODELS_PATH:
#   yolov8{SCALE}-domainshift1.pt  (for backbone + neck + attention blocks+ seg head + detection head)
# NOTE: Please, make sure you have the same task pointed in your hyperparams.yaml file
TASK: DomainShift1
# Tasks: DomainShift1 (COCO-seg -> Retinography-seg); CAMTL (Retinography-seg -> Angiography: vessel-seg + stenosis-det);

nc: 1
scales:
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.25, 512]

# ===== Backbone (YOLOv8) =====
backbone:
  - [-1, 1, Conv, [64, 3, 2]]            # 0  P1/2
  - [-1, 1, Conv, [128, 3, 2]]           # 1  P2/4
  - [-1, 3, C2f, [128, True]]            # 2
  - [-1, 1, Conv, [256, 3, 2]]           # 3  P3/8
  - [-1, 6, C2f, [256, True]]            # 4  (P3 feat)
  - [-1, 1, Conv, [512, 3, 2]]           # 5  P4/16
  - [-1, 6, C2f, [512, True]]            # 6  (P4 feat)
  - [-1, 1, Conv, [1024, 3, 2]]          # 7  P5/32
  - [-1, 3, C2f, [1024, True]]           # 8
  - [-1, 1, SPPF, [1024, 5]]             # 9  (P5 feat)

# ===== PAN neck (base multi-scale features) =====
neck:
  # up path
  - [9, 1, nn.Upsample, [None, 2, 'nearest']]     # 10  P5->P4
  - [[10, 6], 1, Concat, [1]]                     # 11
  - [-1, 3, C2f, [512, False]]                    # 12  N_P4
  - [12, 1, nn.Upsample, [None, 2, 'nearest']]    # 13  P4->P3
  - [[13, 4], 1, Concat, [1]]                     # 14
  - [-1, 3, C2f, [256, False]]                    # 15  N_P3
  # down path
  - [15, 1, Conv, [256, 3, 2]]                    # 16  P3->P4
  - [[16, 12], 1, Concat, [1]]                    # 17
  - [-1, 3, C2f, [512, False]]                    # 18  N_P4 (refined)
  - [18, 1, Conv, [512, 3, 2]]                    # 19  P4->P5
  - [[19, 9], 1, Concat, [1]]                     # 20
  - [-1, 3, C2f, [1024, False]]                   # 21  N_P5
  # Channel summary: N_P3=256 (15), N_P4=512 (18), N_P5=1024 (21)

# ===== Segmentation decoder with FPMA (coarse→fine) =====
seg_decoder:
  - [21, 1, Conv, [256, 1, 1]]                    # 22  S5_feat: reduce P5 1024→256
  - [22, 1, nn.Upsample, [None, 2, 'nearest']]    # 23  S5↑: to P4 size
  - [[18, 23], 1, FPMA, [4, 256]]       # 24  S4_feat = FPMA(coarse=256, fine=512, heads=4, embed=256)
  - [24, 1, Conv, [1, 1, 1]]                      # 25  SegLogits_P4 (aux)
  - [24, 1, nn.Upsample, [None, 2, 'nearest']]    # 26  S4↑: to P3 size
  - [[15, 26], 1, FPMA, [4, 256]]       # 27  S3_feat = FPMA(coarse=512, fine=256, heads=4, embed=256)
  - [27, 1, Conv, [1, 1, 1]]                      # 28  SegLogits_P3 (FINAL)

# ===== Mask-guided CTAM (task fusion per scale) =====
attn_fusion:
  - [[21, 22], 1, CTAM, [4, 256]]      # 29  D5_ref = CTAM(tgt=1024, src=256, heads=4, embed=256)
  - [[18, 24], 1, CTAM, [4, 256]]       # 30  D4_ref = CTAM(tgt=512,  src=512, heads=4, embed=256)
  - [[15, 27], 1, CTAM, [4, 256]]       # 31  D3_ref = CTAM(tgt=256,  src=256, heads=4, embed=256)

  # Cross-scale refinement on detection path
  - [[31, 30, 29], 1, CSAM, [256, 4]]   # 32  [D3cs, D4cs, D5cs]

# ===== Heads =====
det_head:
  - [32, 1, Detect, [nc]]                          # 33  Detect takes list [D3cs,D4cs,D5cs]

seg_head:
  - [28, 1, SegHead, []]                      # 34  expose final seg logits (P3)